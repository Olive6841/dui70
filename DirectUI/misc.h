#pragma once

namespace DirectUI
{
	// exported for int
	template <typename T>
	class UILIB_API SafeArrayAccessor
	{
	public:
		SafeArrayAccessor();
		~SafeArrayAccessor();
		SafeArrayAccessor(const SafeArrayAccessor&) = delete;
		SafeArrayAccessor& operator=(const SafeArrayAccessor&) = delete;

		operator T*();
		long Access(SAFEARRAY*, UChar);
		int Count();

	private:
		void* unk1;
		void* unk2;
		void* unk3;
	};

	class UILIB_API CritSecLock
	{
	public:
		CritSecLock(CRITICAL_SECTION* pacs);
		~CritSecLock();

		void Unlock();

	private:
		CRITICAL_SECTION* _pacs;
	};

	template <class T, int>
	class DynamicArray;

	class UILIB_API Expression
	{
	public:
		Expression() = delete;
		Expression(const Expression&) = delete;
		~Expression() = delete;

		Expression& operator=(Expression const&);
		void Destroy();
	};

	/*class UID
	{
	public:
	};*/

	class UILIB_API Surface
	{
	public:
		enum EType
		{
		};

		Surface(Surface const&);
		Surface();
		virtual ~Surface();
		Surface& operator=(Surface const&);

		static enum EType __stdcall GetSurfaceType(unsigned int);
		static unsigned int __stdcall GetSurfaceType(enum EType);

		virtual void T1() = 0;
	};

	class UILIB_API DCSurface
	{
	public:
		DCSurface(DCSurface const&);
		DCSurface(HDC);
		virtual ~DCSurface();
		DCSurface& operator=(DCSurface const&);

		HDC GetHDC();
		virtual Surface::EType GetType() const;
	};

	enum DUSER_MSG_FLAG : UINT32
	{
		GMF_DIRECT = 0x00000000, // OnMessage
		GMF_ROUTED = 0x00000001, // PreviewMessage
		GMF_BUBBLED = 0x00000002, // PostMessage
		GMF_EVENT = 0x00000003, // Message -> Event
		GMF_DESTINATION = 0x00000003, // Message reach dest (same as event)
	};

	enum DUSER_INPUT_DEVICE : UINT32
	{
		GINPUT_MOUSE = 0,
		GINPUT_KEYBOARD = 1,
		GINPUT_JOYSTICK = 2,
	};

	enum DUSER_INPUT_CODE : UINT32
	{
		GMOUSE_MOVE = 0,
		GMOUSE_DOWN = 1,
		GMOUSE_UP = 2,
		GMOUSE_DRAG = 3,
		GMOUSE_HOVER = 4,
		GMOUSE_WHEEL = 5,
		GMOUSE_MAX = 5,

		GBUTTON_NONE = 0,
		GBUTTON_LEFT = 1,
		GBUTTON_RIGHT = 2,
		GBUTTON_MIDDLE = 3,
		GBUTTON_MAX = 3,
	};

	// bitflags
	enum DUSER_INPUT_MODIFIERS : UINT32
	{
		GMODIFIER_NONE = 0x00000000,

		GMODIFIER_LCONTROL = 0x00000001,
		GMODIFIER_RCONTROL = 0x00000002,
		GMODIFIER_LSHIFT = 0x00000004,
		GMODIFIER_RSHIFT = 0x00000008,
		GMODIFIER_LALT = 0x00000010,
		GMODIFIER_RALT = 0x00000020,
		GMODIFIER_LBUTTON = 0x00000040,
		GMODIFIER_RBUTTON = 0x00000080,
		GMODIFIER_MBUTTON = 0x00000100,

		GMODIFIER_CONTROL = (GMODIFIER_LCONTROL | GMODIFIER_RCONTROL),
		GMODIFIER_SHIFT = (GMODIFIER_LSHIFT | GMODIFIER_RSHIFT),
		GMODIFIER_ALT = (GMODIFIER_LALT | GMODIFIER_RALT),
	};

	struct Event
	{
		Element* peTarget;
		UID uidType;
		bool fHandled;
		DUSER_MSG_FLAG nStage;
		bool fUIAHandled;
	};

	struct InputEvent
	{
		Element* peTarget;
		bool fHandled;
		DUSER_MSG_FLAG nStage;
		DUSER_INPUT_DEVICE nDevice;
		DUSER_INPUT_CODE nCode;
		DUSER_INPUT_MODIFIERS uModifiers;
	};

	struct PointerEvent : InputEvent
	{
		POINT ptClientPxl;
		UINT nPointerID;
		BOOL fPrimary;
	};

	struct MouseEvent : InputEvent
	{
		POINT ptClientPxl;
		BYTE bButton;
		UINT nFlags;
	};

	struct KeyboardEvent : InputEvent
	{
		WCHAR ch;
		WORD cRep;
		WORD wFlags;
	};

	struct KeyboardNavigateEvent : Event
	{
		int iNavDir;
		bool fSetFocus;
		KeyboardNavigateEvent();
	};
	
	struct AnimateScrollEvent : Event
	{
		int dDistance;
		bool fVertical;
		AnimateScrollEvent();
	};

	struct RectangleChange
	{
	};

	struct ElementRuntimeId
	{
	};

	enum DIRECTMANIPULATION_CONFIGURATION
	{
		DIRECTMANIPULATION_CONFIGURATION_NONE = 0,
		DIRECTMANIPULATION_CONFIGURATION_INTERACTION = 1,
		DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_X = 2,
		DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_Y = 4,
		DIRECTMANIPULATION_CONFIGURATION_SCALING = 16,
		DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_INERTIA = 32,
		DIRECTMANIPULATION_CONFIGURATION_SCALING_INERTIA = 128,
		DIRECTMANIPULATION_CONFIGURATION_RAILS_X = 256,
		DIRECTMANIPULATION_CONFIGURATION_RAILS_Y = 512
	};

	enum DIRECTMANIPULATION_GESTURE_CONFIGURATION
	{
		DIRECTMANIPULATION_GESTURE_NONE = 0,
		DIRECTMANIPULATION_GESTURE_DEFAULT = 0,
		DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_VERTICAL = 8,
		DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_HORIZONTAL = 16,
		DIRECTMANIPULATION_GESTURE_PINCH_ZOOM = 32
	};

	enum DIRECTMANIPULATION_HITTEST_TYPE
	{
		DIRECTMANIPULATION_HITTEST_TYPE_ASYNCHRONOUS = 0,
		DIRECTMANIPULATION_HITTEST_TYPE_SYNCHRONOUS = 1,
		DIRECTMANIPULATION_HITTEST_TYPE_AUTO_SYNCHRONOUS = 2
	};

	enum DIRECTMANIPULATION_HORIZONTALALIGNMENT
	{
		DIRECTMANIPULATION_HORIZONTALALIGNMENT_NONE = 0,
		DIRECTMANIPULATION_HORIZONTALALIGNMENT_LEFT = 1,
		DIRECTMANIPULATION_HORIZONTALALIGNMENT_CENTER = 2,
		DIRECTMANIPULATION_HORIZONTALALIGNMENT_RIGHT = 4,
		DIRECTMANIPULATION_HORIZONTALALIGNMENT_UNLOCKCENTER = 8
	};

	enum DIRECTMANIPULATION_INPUT_MODE
	{
		DIRECTMANIPULATION_INPUT_MODE_AUTOMATIC = 0,
		DIRECTMANIPULATION_INPUT_MODE_MANUAL = 1
	};

	enum DIRECTMANIPULATION_MOTION_TYPES
	{
		DIRECTMANIPULATION_MOTION_NONE = 0,
		DIRECTMANIPULATION_MOTION_TRANSLATEX = 1,
		DIRECTMANIPULATION_MOTION_TRANSLATEY = 2,
		DIRECTMANIPULATION_MOTION_ZOOM = 4,
		DIRECTMANIPULATION_MOTION_CENTERX = 16,
		DIRECTMANIPULATION_MOTION_CENTERY = 32,
		DIRECTMANIPULATION_MOTION_ALL = 55
	};

	enum DIRECTMANIPULATION_SNAPPOINT_COORDINATE
	{
		DIRECTMANIPULATION_COORDINATE_BOUNDARY = 0,
		DIRECTMANIPULATION_COORDINATE_ORIGIN = 1,
		DIRECTMANIPULATION_COORDINATE_MIRRORED = 16
	};

	enum DIRECTMANIPULATION_SNAPPOINT_TYPE
	{
		DIRECTMANIPULATION_SNAPPOINT_MANDATORY = 0,
		DIRECTMANIPULATION_SNAPPOINT_OPTIONAL = 1,
		DIRECTMANIPULATION_SNAPPOINT_MANDATORY_SINGLE = 2,
		DIRECTMANIPULATION_SNAPPOINT_OPTIONAL_SINGLE = 3
	};

	enum DIRECTMANIPULATION_STATUS
	{
		DIRECTMANIPULATION_BUILDING = 0,
		DIRECTMANIPULATION_ENABLED = 1,
		DIRECTMANIPULATION_DISABLED = 2,
		DIRECTMANIPULATION_RUNNING = 3,
		DIRECTMANIPULATION_INERTIA = 4,
		DIRECTMANIPULATION_READY = 5,
		DIRECTMANIPULATION_SUSPENDED = 6
	};

	enum DIRECTMANIPULATION_VERTICALALIGNMENT
	{
		DIRECTMANIPULATION_VERTICALALIGNMENT_NONE = 0,
		DIRECTMANIPULATION_VERTICALALIGNMENT_TOP = 1,
		DIRECTMANIPULATION_VERTICALALIGNMENT_CENTER = 2,
		DIRECTMANIPULATION_VERTICALALIGNMENT_BOTTOM = 4,
		DIRECTMANIPULATION_VERTICALALIGNMENT_UNLOCKCENTER = 8
	};

	enum DIRECTMANIPULATION_VIEWPORT_OPTIONS
	{
		DIRECTMANIPULATION_VIEWPORT_OPTIONS_DEFAULT = 0,
		DIRECTMANIPULATION_VIEWPORT_OPTIONS_AUTODISABLE = 1,
		DIRECTMANIPULATION_VIEWPORT_OPTIONS_MANUALUPDATE = 2,
		DIRECTMANIPULATION_VIEWPORT_OPTIONS_INPUT = 4,
		DIRECTMANIPULATION_VIEWPORT_OPTIONS_EXPLICITHITTEST = 8,
		DIRECTMANIPULATION_VIEWPORT_OPTIONS_DISABLEPIXELSNAPPING = 16
	};
	
	class UILIB_API ResourceModuleHandles
	{
	public:
		ResourceModuleHandles();
		~ResourceModuleHandles();
		ResourceModuleHandles& operator=(ResourceModuleHandles const&);
		long GetHandle(unsigned short const*, HINSTANCE*);

	private:
		static long volatile g_cRefCount;
	};

	template <class T>
	class UiaArray
	{
	public:
	};

	class DeferCycle
	{
	};
} // namespace DirectUI
